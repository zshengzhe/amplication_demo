/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { HelloMessageEntity } from "./HelloMessageEntity";
import { HelloMessageEntityCountArgs } from "./HelloMessageEntityCountArgs";
import { HelloMessageEntityFindManyArgs } from "./HelloMessageEntityFindManyArgs";
import { HelloMessageEntityFindUniqueArgs } from "./HelloMessageEntityFindUniqueArgs";
import { CreateHelloMessageEntityArgs } from "./CreateHelloMessageEntityArgs";
import { UpdateHelloMessageEntityArgs } from "./UpdateHelloMessageEntityArgs";
import { DeleteHelloMessageEntityArgs } from "./DeleteHelloMessageEntityArgs";
import { HelloMessageEntityService } from "../helloMessageEntity.service";
@graphql.Resolver(() => HelloMessageEntity)
export class HelloMessageEntityResolverBase {
  constructor(protected readonly service: HelloMessageEntityService) {}

  async _helloMessageEntitiesMeta(
    @graphql.Args() args: HelloMessageEntityCountArgs
  ): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [HelloMessageEntity])
  async helloMessageEntities(
    @graphql.Args() args: HelloMessageEntityFindManyArgs
  ): Promise<HelloMessageEntity[]> {
    return this.service.helloMessageEntities(args);
  }

  @graphql.Query(() => HelloMessageEntity, { nullable: true })
  async helloMessageEntity(
    @graphql.Args() args: HelloMessageEntityFindUniqueArgs
  ): Promise<HelloMessageEntity | null> {
    const result = await this.service.helloMessageEntity(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => HelloMessageEntity)
  async createHelloMessageEntity(
    @graphql.Args() args: CreateHelloMessageEntityArgs
  ): Promise<HelloMessageEntity> {
    return await this.service.createHelloMessageEntity({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => HelloMessageEntity)
  async updateHelloMessageEntity(
    @graphql.Args() args: UpdateHelloMessageEntityArgs
  ): Promise<HelloMessageEntity | null> {
    try {
      return await this.service.updateHelloMessageEntity({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => HelloMessageEntity)
  async deleteHelloMessageEntity(
    @graphql.Args() args: DeleteHelloMessageEntityArgs
  ): Promise<HelloMessageEntity | null> {
    try {
      return await this.service.deleteHelloMessageEntity(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }
}
