/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as common from "@nestjs/common";
import * as swagger from "@nestjs/swagger";
import { isRecordNotFoundError } from "../../prisma.util";
import * as errors from "../../errors";
import { Request } from "express";
import { plainToClass } from "class-transformer";
import { ApiNestedQuery } from "../../decorators/api-nested-query.decorator";
import { HelloMessageEntityService } from "../helloMessageEntity.service";
import { HelloMessageEntityCreateInput } from "./HelloMessageEntityCreateInput";
import { HelloMessageEntity } from "./HelloMessageEntity";
import { HelloMessageEntityFindManyArgs } from "./HelloMessageEntityFindManyArgs";
import { HelloMessageEntityWhereUniqueInput } from "./HelloMessageEntityWhereUniqueInput";
import { HelloMessageEntityUpdateInput } from "./HelloMessageEntityUpdateInput";

export class HelloMessageEntityControllerBase {
  constructor(protected readonly service: HelloMessageEntityService) {}
  @common.Post()
  @swagger.ApiCreatedResponse({ type: HelloMessageEntity })
  async createHelloMessageEntity(
    @common.Body() data: HelloMessageEntityCreateInput
  ): Promise<HelloMessageEntity> {
    return await this.service.createHelloMessageEntity({
      data: data,
      select: {
        createdAt: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get()
  @swagger.ApiOkResponse({ type: [HelloMessageEntity] })
  @ApiNestedQuery(HelloMessageEntityFindManyArgs)
  async helloMessageEntities(
    @common.Req() request: Request
  ): Promise<HelloMessageEntity[]> {
    const args = plainToClass(HelloMessageEntityFindManyArgs, request.query);
    return this.service.helloMessageEntities({
      ...args,
      select: {
        createdAt: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
  }

  @common.Get("/:id")
  @swagger.ApiOkResponse({ type: HelloMessageEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async helloMessageEntity(
    @common.Param() params: HelloMessageEntityWhereUniqueInput
  ): Promise<HelloMessageEntity | null> {
    const result = await this.service.helloMessageEntity({
      where: params,
      select: {
        createdAt: true,
        id: true,
        message: true,
        name: true,
        updatedAt: true,
      },
    });
    if (result === null) {
      throw new errors.NotFoundException(
        `No resource was found for ${JSON.stringify(params)}`
      );
    }
    return result;
  }

  @common.Patch("/:id")
  @swagger.ApiOkResponse({ type: HelloMessageEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async updateHelloMessageEntity(
    @common.Param() params: HelloMessageEntityWhereUniqueInput,
    @common.Body() data: HelloMessageEntityUpdateInput
  ): Promise<HelloMessageEntity | null> {
    try {
      return await this.service.updateHelloMessageEntity({
        where: params,
        data: data,
        select: {
          createdAt: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }

  @common.Delete("/:id")
  @swagger.ApiOkResponse({ type: HelloMessageEntity })
  @swagger.ApiNotFoundResponse({ type: errors.NotFoundException })
  async deleteHelloMessageEntity(
    @common.Param() params: HelloMessageEntityWhereUniqueInput
  ): Promise<HelloMessageEntity | null> {
    try {
      return await this.service.deleteHelloMessageEntity({
        where: params,
        select: {
          createdAt: true,
          id: true,
          message: true,
          name: true,
          updatedAt: true,
        },
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new errors.NotFoundException(
          `No resource was found for ${JSON.stringify(params)}`
        );
      }
      throw error;
    }
  }
}
